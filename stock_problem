#include<iostream>
#include<bits/stdc++.h>
using namespace std;

/*Approach: */

//Time Complexity = O()
//Auxillary Space = O()

void inputArray(vector<int>&v,int n)
{
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
    }
}

// void printArray(vector<int>&v,int n)
// {
//     for(int i=0;i<n;i++)
//     {
//         cout<<v[i]<<" ";
//     }
//     cout<<endl;
// }

int maxProfit(vector<int>&v,int n,int start,int end)
{
    if(end<=start)
    {
        return 0;
    }
    int profit = 0;
    for(int i=0;i<n;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(v[i]<v[j])
            {
                int curr_profit = v[j]-v[i]+ maxProfit(v,n,start,i-1) + maxProfit(v,n,j+1,end);
                profit = max(profit,curr_profit);
            }

        }
        
    }
    // cout<<profit<<endl;

    return profit;

}

int main(){

    int t;
    cin>>t;

    while(t--)
    {
        int n;
        cin>>n;

        vector<int>arr(n);

        inputArray(arr,n);
        int ans = maxProfit(arr,n,0,n-1);
        // printArray(arr,n);

        cout<<ans<<endl;


    }

    return 0;
}
